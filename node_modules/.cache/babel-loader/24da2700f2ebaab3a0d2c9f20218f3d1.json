{"ast":null,"code":"var _jsxFileName = \"/Users/ayseguleren/Desktop/github/react-todo-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport React, { useState } from 'react';\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n  const toggleTaskCompleted = id => {\n    const updatedTasks = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  };\n\n  const deleteTask = id => {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  };\n\n  const taskList = tasks.map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    propsId: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  const addTask = name => {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoMatic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters btn-group stack-exception\",\n      children: [/*#__PURE__*/_jsxDEV(FilterButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilterButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilterButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"list-heading\",\n      children: headingText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"pjFsLTHS1Kjd+NDyC2kZTexpLic=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ayseguleren/Desktop/github/react-todo-app/src/App.js"],"names":["nanoid","React","useState","Todo","Form","FilterButton","App","props","tasks","setTasks","toggleTaskCompleted","id","updatedTasks","map","task","completed","deleteTask","remainingTasks","filter","taskList","name","tasksNoun","length","headingText","addTask","newTask"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACK,KAAK,CAACC,KAAP,CAAlC;;AAEA,QAAME,mBAAmB,GAAIC,EAAD,IAAQ;AAClC,UAAMC,YAAY,GAAGJ,KAAK,CAACK,GAAN,CAAWC,IAAD,IAAU;AACvC,UAAGH,EAAE,KAAKG,IAAI,CAACH,EAAf,EAAkB;AAChB,eAAO,EAAC,GAAGG,IAAJ;AAAUC,UAAAA,SAAS,EAAC,CAACD,IAAI,CAACC;AAA1B,SAAP;AACD;;AACD,aAAOD,IAAP;AACD,KALoB,CAArB;AAMAL,IAAAA,QAAQ,CAACG,YAAD,CAAR;AACD,GARD;;AAUA,QAAMI,UAAU,GAAIL,EAAD,IAAQ;AACzB,UAAMM,cAAc,GAAGT,KAAK,CAACU,MAAN,CAAaJ,IAAI,IAAIH,EAAE,KAAKG,IAAI,CAACH,EAAjC,CAAvB;AACAF,IAAAA,QAAQ,CAACQ,cAAD,CAAR;AACD,GAHD;;AAKA,QAAME,QAAQ,GAAGX,KAAK,CAACK,GAAN,CAAUC,IAAI,iBAC7B,QAAC,IAAD;AACE,IAAA,OAAO,EAAEA,IAAI,CAACH,EADhB;AAEE,IAAA,IAAI,EAAEG,IAAI,CAACM,IAFb;AAGE,IAAA,SAAS,EAAEN,IAAI,CAACC,SAHlB;AAKE,IAAA,mBAAmB,EAAEL,mBALvB;AAME,IAAA,UAAU,EAAEM;AANd,KAIOF,IAAI,CAACH,EAJZ;AAAA;AAAA;AAAA;AAAA,UADe,CAAjB;AAWA,QAAMU,SAAS,GAAGF,QAAQ,CAACG,MAAT,KAAoB,CAApB,GAAwB,OAAxB,GAAkC,MAApD;AACA,QAAMC,WAAW,GAAI,GAAEJ,QAAQ,CAACG,MAAO,IAAGD,SAAU,YAApD;;AAEA,QAAMG,OAAO,GAAIJ,IAAD,IAAU;AACxB,UAAMK,OAAO,GAAG;AAACd,MAAAA,EAAE,EAAE,UAAUX,MAAM,EAArB;AAAyBoB,MAAAA,IAAI,EAACA,IAA9B;AAAoCL,MAAAA,SAAS,EAAC;AAA9C,KAAhB;AACAN,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWiB,OAAX,CAAD,CAAR;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,OAAO,EAAED;AAAf;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,SAAS,EAAC,mCAAf;AAAA,8BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAQE;AAAI,MAAA,EAAE,EAAC,cAAP;AAAA,gBACID;AADJ;AAAA;AAAA;AAAA;AAAA,YARF,eAWE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,SAAS,EAAC,uCAFZ;AAGE,yBAAgB,cAHlB;AAAA,gBAKGJ;AALH;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GA1DQb,G;;KAAAA,G;AA4DT,eAAeA,GAAf","sourcesContent":["import { nanoid } from \"nanoid\";\nimport React, {useState} from 'react'\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks); \n\n  const toggleTaskCompleted = (id) => {\n    const updatedTasks = tasks.map((task) => {\n      if(id === task.id){\n        return {...task, completed:!task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  const deleteTask = (id) => {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  const taskList = tasks.map(task => (\n    <Todo \n      propsId={task.id} \n      name={task.name} \n      completed={task.completed} \n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n    />\n  ));\n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  const addTask = (name) => {\n    const newTask = {id: \"todo-\" + nanoid(), name:name, completed:false};\n    setTasks([...tasks, newTask]);\n  }\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n        <FilterButton />\n        <FilterButton />\n        <FilterButton />\n      </div>\n      <h2 id=\"list-heading\">\n         {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}