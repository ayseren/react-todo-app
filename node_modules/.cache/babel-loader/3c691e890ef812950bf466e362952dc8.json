{"ast":null,"code":"var _jsxFileName = \"/Users/ayseguleren/Desktop/github/react-todo-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport React, { useState } from 'react';\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n  const filterList = FILTER_NAMES.map(name => {\n    /*#__PURE__*/\n    _jsxDEV(FilterButton, {\n      name: name,\n      isPressed: name === filter,\n      setFilter: setFilter\n    }, name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }, this);\n  });\n\n  const toggleTaskCompleted = id => {\n    const updatedTasks = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  };\n\n  const deleteTask = id => {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  };\n\n  const editTask = (id, newName) => {\n    const editedTasks = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTasks);\n  };\n\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    propsId: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  const addTask = name => {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoMatic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters btn-group stack-exception\",\n      children: filterList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"list-heading\",\n      children: headingText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"EeRnFHbkPD5i3v9CpmwzSMi80Ig=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ayseguleren/Desktop/github/react-todo-app/src/App.js"],"names":["nanoid","React","useState","Todo","Form","FilterButton","App","props","tasks","setTasks","filter","setFilter","FILTER_MAP","All","Active","task","completed","Completed","FILTER_NAMES","Object","keys","filterList","map","name","toggleTaskCompleted","id","updatedTasks","deleteTask","remainingTasks","editTask","newName","editedTasks","taskList","tasksNoun","length","headingText","addTask","newTask"],"mappings":"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","sourcesContent":["import { nanoid } from \"nanoid\";\nimport React, {useState} from 'react'\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks); \n  const [filter, setFilter] = useState('All');\n\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n\n  const filterList = FILTER_NAMES.map(name => {\n    <FilterButton \n      key={name} \n      name={name} \n      isPressed = {name === filter}\n      setFilter={setFilter}\n    />\n  })\n  const toggleTaskCompleted = (id) => {\n    const updatedTasks = tasks.map((task) => {\n      if(id === task.id){\n        return {...task, completed:!task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  const deleteTask = (id) => {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  const editTask = (id, newName) => {\n    const editedTasks = tasks.map(task => {\n      if(id === task.id){\n        return {...task, name:newName}\n      }\n      return task;\n    });\n    setTasks(editedTasks);\n  }\n\n  const taskList = tasks\n  .filter(FILTER_MAP[filter])\n  .map(task => (\n    <Todo \n      propsId={task.id} \n      name={task.name} \n      completed={task.completed} \n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n      editTask={editTask}\n    />\n  ));\n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  const addTask = (name) => {\n    const newTask = {id: \"todo-\" + nanoid(), name:name, completed:false};\n    setTasks([...tasks, newTask]);\n  }\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n        {filterList}\n      </div>\n      <h2 id=\"list-heading\">\n         {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}